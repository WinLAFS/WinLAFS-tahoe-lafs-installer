# <= This will outcomment this/a line
[Application]

# The user-readable name of your application. 
# This will be used for various display purposes in the installer, 
# and for shortcuts and the folder in ‘Program Files’.

name=Tahoe-LAFS

# http://pynsist.readthedocs.org/en/latest/cfgfile.html
# The version number of your application.

version=1.10.0

# The function to launch your application, 
# in the format module:function. Dots are allowed in the module part. 
# pynsist will create a script like this, plus some boilerplate:
#           from module import function
#           function()
# How to launch the app - this calls the 'main' function from the 'myapp' package:

#entry_point=myapp:main

# Path to a .ico file to be used for shortcuts to your application. 
# Pynsist has a default generic icon, but you probably want to replace it.

#icon=..\tahoe-icon\tahoe-lafs.ico

#    Path to the Python script which launches your application, as an alternative to entry_point.
#
#    Ensure that this boilerplate code is at the top of your script:
#
#             #!python3.3
#             import sys
#             sys.path.insert(0, 'pkgs')
#
#    The first line tells it which version of Python to run with. 
# If you use binary packages, packages compiled for Python 3.3 won’t work with Python 3.4. 
# The other lines make sure it can find the packages installed along with your application.

#script=

#    Lower level definition of a shortcut, to create start menu entries for help pages or other non-Python entry points. 
# You shouldn’t normally use this for Python entry points.
# Note: Either entry_point, script or target must be specified, but not more than one. 
# Specifying entry_point is normally easiest and most reliable.

#target= parameters=

#If true, shortcuts will be created using the py launcher, which opens a console for the process. 
#If false, or not specified, they will use the pyw launcher, which doesn’t create a console.

console=true

#    Path to a file containing extra Python commands to be run before your code is launched, 
#for example to set environment variables needed by pygtk. 
#This is only valid if you use entry_point to specify how to launch your application.
#
#    If you use the Python API, this parameter can also be passed as a file-like object, such as io.StringIO.

#extra_preamble=

# Shortcut sections
# One shortcut will always be generated for the application. You can add extra shortcuts by defining sections titled Shortcut Name. For example:
#
#[Shortcut IPython Notebook]
#entry_point=IPython.html.notebookapp:launch_new_instance
#icon=scripts/ipython_nb.ico
#console=true
#
#entry_point
#script (optional)
#icon (optional)
#console (optional)
#target (optional)
#parameters (optional)
#extra_preamble (optional)
#
#    These options all work the same way as in the Application section.

[Shortcut Install Tahoe-LAFS]
console=true
target=setup.py
parameters=build

[Shortcut Test Tahoe-LAFS]
console=true
target=setup.py 
parameters=trial


[Shortcut Version of Tahoe-LAFS]
console=true
target=bin\tahoe
parameters=--version

[Shortcut  Tahoe-LAFS]
console=true
target=setup.py
parameters=build

[Python]
version=2.7.9
bitness=64

[Include]
# Importable packages that your application requires, one per line
packages = setuptools
     zfec
     simplejson
     zope.interface
     Twisted
     foolscap
     pyOpenSSL
     Nevow
     pycrypto
     pyasn1
     mock
     pycryptopp

# Other files and folders that should be installed
files = 

    ..\tahoe-deps\
