# <= This will outcomment this/a line
[Application]

# The user-readable name of your application. 
# This will be used for various display purposes in the installer, 
# and for shortcuts and the folder in ‘Program Files’.

name=Tahoe-LAFS

# http://pynsist.readthedocs.org/en/latest/cfgfile.html
# The version number of your application.

version=1.10.0

# The function to launch your application, 
# in the format module:function. Dots are allowed in the module part. 
# pynsist will create a script like this, plus some boilerplate:
#           from module import function
#           function()
# How to launch the app - this calls the 'main' function from the 'myapp' package:

#entry_point=myapp:main

# Path to a .ico file to be used for shortcuts to your application. 
# Pynsist has a default generic icon, but you probably want to replace it.

#icon=..\tahoe-icon\tahoe-lafs.ico

#    Path to the Python script which launches your application, as an alternative to entry_point.
#
#    Ensure that this boilerplate code is at the top of your script:
#
#             #!python3.3
#             import sys
#             sys.path.insert(0, 'pkgs')
#
#    The first line tells it which version of Python to run with. 
# If you use binary packages, packages compiled for Python 3.3 won’t work with Python 3.4. 
# The other lines make sure it can find the packages installed along with your application.

#script=

#    Lower level definition of a shortcut, to create start menu entries for help pages or other non-Python entry points. 
# You shouldn’t normally use this for Python entry points.
# Note: Either entry_point, script or target must be specified, but not more than one. 
# Specifying entry_point is normally easiest and most reliable.

#target= parameters=

#If true, shortcuts will be created using the py launcher, which opens a console for the process. 
#If false, or not specified, they will use the pyw launcher, which doesn’t create a console.

console=true

#    Path to a file containing extra Python commands to be run before your code is launched, 
#for example to set environment variables needed by pygtk. 
#This is only valid if you use entry_point to specify how to launch your application.
#
#    If you use the Python API, this parameter can also be passed as a file-like object, such as io.StringIO.

#extra_preamble=

# Shortcut sections
# One shortcut will always be generated for the application. You can add extra shortcuts by defining sections titled Shortcut Name. For example:
#
#[Shortcut IPython Notebook]
#entry_point=IPython.html.notebookapp:launch_new_instance
#icon=scripts/ipython_nb.ico
#console=true
#
#entry_point
#script (optional)
#icon (optional)
#console (optional)
#target (optional)
#parameters (optional)
#extra_preamble (optional)
#
#    These options all work the same way as in the Application section.

[Shortcut Install Tahoe-LAFS]
console=true
target=setup.py
parameters=build

[Shortcut Test Tahoe-LAFS]
console=true
target=setup.py 
parameters=trial


[Shortcut Version of Tahoe-LAFS]
console=true
target=bin\tahoe
parameters=--version

[Shortcut create-client Tahoe-LAFS]
console=true
target=bin\tahoe
parameters=create-client

[Shortcut RUN Tahoe-LAFS]
console=true
target=bin\tahoe
parameters=run

[Shortcut Commands of Tahoe-LAFS]
console=true
target=bin\tahoe
parameters=--help

[Python]
version=2.7.9
bitness=64

[Include]
# Importable packages that your application requires, one per line
packages = setuptools
     argparse
     pyutil
     zbase32
     zfec
     simplejson
     zope.interface
     Twisted
     foolscap
     pyOpenSSL
     Nevow
     pycrypto
     pyasn1
     mock
     pycryptopp

# Other files and folders that should be installed
#    Extra files or directories to be installed with your application.
#
#    You can optionally add > destination after each file to install it somewhere other than the installation directory. The destination can be:
#
#        An absolute path on the target system, e.g. C:\\ (but this is not usually desirable).
#        A path starting with $INSTDIR, the specified installation directory.
#        A path starting with any of the constants NSIS provides, e.g. $SYSDIR.
#
#    The destination can also include ${PRODUCT_NAME}, which will be expanded to the name of your application.
#
#    For instance, to put a data file in the (32 bit) common files directory:
#
#    [Include]
#    files=mydata.dat > $COMMONFILES

#files = ..\tahoe-deps\

#    Files to be excluded from your installer. 
# This can be used to include a Python library or extra directory only partially, 
# for example to include large monolithic python packages without their samples 
# and test suites to achieve a smaller installer file.
#
#    Please note:
#
#        The parameter is expected to contain a list of files relative to the build directory. 
#         Therefore, to include files from a package, you have to start your pattern with pkgs/<packagename>/.
#        You can use wildcard characters like * or ?, similar to a Unix shell.
#        If you want to exclude whole subfolders, do not put a path separator (e.g. /) at their end.
#        The exclude patterns are only applied to packages and to directories specified using the files option. 
#         If your exclude option directly contradicts your files or packages option, 
#         the files in question will be included (you can not exclude a full package/extra directory 
#         or a single file listed in files).
#
#    Example:
#
#    [Include]
#    packages=PySide
#    files=data_dir
#    exclude=pkgs/PySide/examples
#      data_dir/ignoredfile

#exclude=

[build]

# The build directory. Defaults to build/nsis/.

#directory=

# The filename of the installer, relative to the build directory. 
# The default is made from your application name and version.

#installer_name=

#    The path of a template .nsi file to specify further details of the installer. 
#     The default template is part of pynsist.
#
#    This is an advanced option, and if you specify a custom template, 
#     you may well have to update it to work with future releases of Pynsist.
#
#    See the NSIS Scripting Reference for details of the NSIS language, 
#     and the Jinja2 Template Designer Docs for details of the template format. 
#     Pynsist uses templates with square brackets ([]) instead of Jinja’s default curly braces ({}).

#nsi_template=



